#************* Load images, Player ship, lasers and background completed first ***********#
# Load images
RED_SPACE_SHIP = pygame.image.load(os.path.join("assets", "pixel_ship_red_small.png"))
GREEN_SPACE_SHIP = pygame.image.load(os.path.join("assets", "pixel_ship_green_small.png"))
BLUE_SPACE_SHIP = pygame.image.load(os.path.join("assets", "pixel_ship_blue_small.png"))

# Player ship
YELLOW_SPACE_SHIP = pygame.image.load(os.path.join("assets", "pixel_ship_yellow.png"))

# Lasers
RED_LASER = pygame.image.load(os.path.join("assets", "pixel_laser_red.png"))
GREEN_LASER = pygame.image.load(os.path.join("assets", "pixel_laser_green.png"))
BLUE_LASER = pygame.image.load(os.path.join("assets", "pixel_laser_blue.png"))
YELLOW_LASER = pygame.image.load(os.path.join("assets", "pixel_laser_yellow.png"))

# Background
BG = pygame.image.load(os.path.join("assets", "background-black.png"))

#************* Window created second ************#
# Creating window
WIDTH, HEIGHT = 750, 750
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Space Invaders")

#********** Third in line to complete after creating window ***********#
# Creating main loops
def main():
    run = True
    FPS = 60
    clock = pygame.time.Clock()

    while run:
        clock.tick(FPS)
        # Quits game if game exited
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False

main()

#******** Fourth in line adding redraw function to main function **********#
def main():
    run = True
    FPS = 60
    clock = pygame.time.Clock()
    # Redraws screen everytime while loop is run and refreshed
    def redraw_window():
        WIN.blit(BG, (0, 0))
        pygame.display.update()

    while run:
        clock.tick(FPS)
        redraw_window()
        # Quits game if game exited
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False

main()

#********* Fifth in line changing background to scale background image to fit size of screen ************#
# Background
BG = pygame.transform.scale(pygame.image.load(os.path.join("assets", "background-black.png")), (WIDTH, HEIGHT))

#********* Sixth is adding level and lives to main function ***********#
def main():
    run = True
    FPS = 60
    level = 1
    lives = 5

#********* Seventh adding in font and placing level and lives on the screen **********#
def main():
    run = True
    FPS = 60
    level = 1
    lives = 5
    main_font = pygame.font.SysFont("comicsans", 50)

    clock = pygame.time.Clock()

    # Redraws screen everytime while loop is run and refreshed
    def redraw_window():
        WIN.blit(BG, (0, 0))
        # Draw text
        lives_label = main_font.render(f"Lives: {lives}", 1, (255, 0, 0))
        level_label = main_font.render(f"Level: {level}", 1, (255, 255, 255))

        WIN.blit(lives_label, (10, 10))
        WIN.blit(level_label, (WIDTH - level_label.get_width() - 10, 10))

#********** Eighth creating ship class and adding to main function and redraw function ***********#
class Ship:
    def __init__(self, x, y, health=100):
        self.x = x
        self.y = y
        self.health = health
        self.ship_img = None
        self.laser_img = None
        self.lasers = []
        self.cool_down_counter = 0

    def draw(self, window):
        pygame.draw.rect(window, (255, 0, 0), (self.x, self.y, 50, 50))

def main():
    run = True
    FPS = 60
    level = 1
    lives = 5
    main_font = pygame.font.SysFont("comicsans", 50)

    ship = Ship(300, 650)

    clock = pygame.time.Clock()

    def redraw_window():
        WIN.blit(BG, (0, 0))
        # Draw text
        lives_label = main_font.render(f"Lives: {lives}", 1, (255, 0, 0))
        level_label = main_font.render(f"Level: {level}", 1, (255, 255, 255))

        WIN.blit(lives_label, (10, 10))
        WIN.blit(level_label, (WIDTH - level_label.get_width() - 10, 10))

        ship.draw(WIN)

        pygame.display.update()

#********* Ninth step is adding keys and movement to player *********#
# Add player_velocity to main loop
def main():
    run = True
    FPS = 60
    level = 1
    lives = 5
    main_font = pygame.font.SysFont("comicsans", 50)

    player_velocity = 5

    ship = Ship(300, 650)

    clock = pygame.time.Clock()

# add key checker and movement to redraw function
# Returns dictionary of all of the keys and tells you whether pressed or not
        keys = pygame.key.get_pressed()
        if keys[pygame.K_a]: # left
            ship.x -= player_velocity
        if keys[pygame.K_d]: # right
            ship.x += player_velocity
        if keys[pygame.K_w]: # up
            ship.y -= player_velocity
        if keys[pygame.K_s]: # down
            ship.y += player_velocity

# Above is just for moving in general.  Below will prevent player from leaving the screen
        if keys[pygame.K_a] and ship.x - player_velocity > 0:  # left
            ship.x -= player_velocity
        if keys[pygame.K_d] and ship.x + player_velocity + 50 < WIDTH:  # right
            ship.x += player_velocity
        if keys[pygame.K_w] and ship.y - player_velocity > 0:  # up
            ship.y -= player_velocity
        if keys[pygame.K_s] and ship.y + player_velocity + 50 < HEIGHT:  # down
            ship.y += player_velocity

# ************ Change from box player to actual image player *********** #
class Ship:
    def __init__(self, x, y, health=100):
        self.x = x
        self.y = y
        self.health = health
        self.ship_img = None
        self.laser_img = None
        self.lasers = []
        self.cool_down_counter = 0

    def draw(self, window):
        window.blit(self.ship_img, (self.x, self.y))


class Player(Ship):
    def __init__(self, x, y, health=100):
        super().__init__(x, y, health)
        self.ship_img = YELLOW_SPACE_SHIP
        self.laser_img = YELLOW_LASER
        self.mask = pygame.mask.from_surface(self.ship_img)
        self.max_health = health

# Change all "ship" variables to "player" in main.py